# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

jobs:
  build-and-test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        pip install -e .
    # - name: Lint with pylint
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     pylint iter8_analytics --reports=y
    - name: Test
      run: make test

# Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build-and-push:
    # Ensure test job passes before pushing image.
    # needs: build-and-test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    env:
      VERSION:

    steps:
      # - uses: actions/checkout@v2
      # - name: Build image
      #   run: docker build . --file Dockerfile --tag $IMAGE_NAME
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v1
        
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_SECRET }}

      # - name: Log into registry
      #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Get version
        run: |
          tarref=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tagref
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            echo "VERSION=$(echo $tarref | sed -e 's/^v//')" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == *"master" ]]; then
            echo "VERSION=latest" >> $GITHUB_ENV
          fi
          
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          # context: ./
          # file: ./Dockerfile
          push: true
          tags: iter8/iter8-analytics:${{ env.VERSION }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
          

      # - name: Push image
      #   run: |
      #     IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "master" ] && VERSION=latest
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$VERSION
      #     docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
      #     docker push $IMAGE_ID:$VERSION
